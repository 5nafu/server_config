template Service "remote-service" {
  import "generic-service"

  //specify where the check is executed
  command_endpoint = host.vars.client_endpoint
}



apply Service "disk" {
  import "remote-service"
  check_command = "disk"

  assign where host.vars.client_endpoint
}

apply Service "load" {
  import "remote-service"

  check_command = "load"


  assign where host.vars.client_endpoint
}

apply Service "procs" {
  import "remote-service"

  check_command = "procs"

  assign where host.vars.client_endpoint
}

apply Service "swap" {
  import "remote-service"

  check_command = "swap"

  assign where host.vars.client_endpoint
}

apply Service "users" {
  import "remote-service"

  check_command = "users"

  assign where host.vars.client_endpoint
}

apply Service "apt" {
  import "remote-service"

  check_command = "apt"

  assign where host.vars.os_family == "Debian"
}

apply Service "ntp_peer" {
  import "remote-service"
  check_command = "ntp_peer"
  vars.ntp_address = "127.0.0.1"
  vars.ntp_wsource = "@2"
  vars.ntp_csource = "@1"
  assign where host.vars.os == "Linux"
}

apply Service "imap" {
  import "generic-service"
  check_command = "imap"
  vars.imap_certificate_age = "7,3"
  vars.imap_port = "993"
  vars.imap_ssl = true
  assign where host.vars.mailserver == true
}

apply Service "smtp" {
  import "generic-service"
  check_command = "smtp"
  vars.smtp_certificate_age = "7,3"
  vars.smtp_starttls = true
  assign where host.vars.mailserver == true
}

apply Service "mailq" {
  import "remote-service"
  check_command = "mailq"
  vars.mailq_critical = 50
  vars.mailq_warning = 40
  assign where host.vars.os == "Linux"
}

apply Service "mysql" {
  import "remote-service"
  check_command = "mysql"
  vars.mysql_hostname = "127.0.0.1"
  vars.mysql_file = "/etc/icinga2/my.cnf"
  vars.mysql_group = "mysql"
  assign where host.vars.mysql == true
}

apply Service "xmpp" {
  import "generic-service"
  check_command = "tcp"
  vars.tcp_port = 5222
  assign where host.vars.xmpp == true
}

apply Service for ( smart => config in host.vars.smart_devices) {
  import "remote-service"
  check_command = "smart"
  vars += config
  assign where host.vars.smart_devices
}

apply Service "process-" for (process => config in host.vars.running_procs) {
  import "remote-service"
  vars += config
  if (!vars.procs_warning) { vars.procs_warning = "1:1" }
  if (!vars.procs_critical) { vars.procs_critical = "1:1024" }

  check_command = "procs"
  assign where host.vars.running_procs
}

